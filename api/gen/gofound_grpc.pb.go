// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc2
// source: gofound.proto

package gofoundpd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GofoundServiceClient is the client API for GofoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GofoundServiceClient interface {
	Welcome(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WelcomeResponse, error)
}

type gofoundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGofoundServiceClient(cc grpc.ClientConnInterface) GofoundServiceClient {
	return &gofoundServiceClient{cc}
}

func (c *gofoundServiceClient) Welcome(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*WelcomeResponse, error) {
	out := new(WelcomeResponse)
	err := c.cc.Invoke(ctx, "/gofound.GofoundService/Welcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GofoundServiceServer is the server API for GofoundService service.
// All implementations must embed UnimplementedGofoundServiceServer
// for forward compatibility
type GofoundServiceServer interface {
	Welcome(context.Context, *EmptyRequest) (*WelcomeResponse, error)
	mustEmbedUnimplementedGofoundServiceServer()
}

// UnimplementedGofoundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGofoundServiceServer struct {
}

func (UnimplementedGofoundServiceServer) Welcome(context.Context, *EmptyRequest) (*WelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Welcome not implemented")
}
func (UnimplementedGofoundServiceServer) mustEmbedUnimplementedGofoundServiceServer() {}

// UnsafeGofoundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GofoundServiceServer will
// result in compilation errors.
type UnsafeGofoundServiceServer interface {
	mustEmbedUnimplementedGofoundServiceServer()
}

func RegisterGofoundServiceServer(s grpc.ServiceRegistrar, srv GofoundServiceServer) {
	s.RegisterService(&GofoundService_ServiceDesc, srv)
}

func _GofoundService_Welcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GofoundServiceServer).Welcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofound.GofoundService/Welcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GofoundServiceServer).Welcome(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GofoundService_ServiceDesc is the grpc.ServiceDesc for GofoundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GofoundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gofound.GofoundService",
	HandlerType: (*GofoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Welcome",
			Handler:    _GofoundService_Welcome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gofound.proto",
}
